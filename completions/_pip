#compdef pip

_pip_installed() {
  installed_pkgs=(${${(f)"$(pip list)"}%% *})
}

local -a _1st_arguments
_1st_arguments=(
  'bundle:Create pybundles (archives containing multiple packages)'
  'freeze:Output all currently installed packages (exact versions) to stdout'
  'help:Show available commands'
  'install:Install packages'
  'search:Search PyPI'
  'uninstall:Uninstall packages'
  'unzip:Unzip individual packages'
  'zip:Zip individual packages'
)

local expl
local -a pkgs installed_pkgs

local context state state_descr line
typeset -A opt_args

_arguments \
  '(--version)--version[show version number of program and exit]' \
  '(-h --help)'{-h,--help}'[show help]' \
  '(-E --environment)'{-E,--environment}'[virtualenv environment to run pip in]' \
  '(-s --enable-site-packages)'{-s,--enable-site-packages}'[include site-packages in virtualenv]' \
  '(-v --verbose)'{-v,--verbose}'[give more output]' \
  '(-q --quiet)'{-q,--quiet}'[give less output]' \
  '(--log)--log[log file location]' \
  '(--proxy)--proxy[proxy in form user:passwd@proxy.server:port]' \
  '(--timeout)--timeout[socket timeout (default 15s)]' \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "pip subcommand" _1st_arguments
  return
fi

case "$words[1]" in
  search)
    _arguments \
      '(--index)--index[base URL of Python Package Index]' ;;
  freeze)
    _arguments \
      '(-l --local)'{-l,--local}'[report only virtualenv packages]' ;;
  help)
    declare -a subcommands
    subcommands=(${_1st_arguments%%:*})
    _arguments '1: :->subcommands' && return 0
    [[ $state != "subcommands" ]] || \
      _wanted subcommands expl "available subcommands" compadd -a subcommands ;;
  install)
    _arguments \
      '(-r --requirement)'{-r,--requirement}'[install from a requirement file]:file:_files' \
      '(-U --upgrade)'{-U,--upgrade}'[upgrade all packages to the newest available version]' \
      '(-f --find-links)'{-f,--find-links}'[URL for finding packages]' \
      '(--no-deps --no-dependencies)'{--no-deps,--no-dependencies}'[iIgnore package dependencies]' \
      '(--no-install)--no-install[only download packages]' \
      '(--no-download)--no-download[only install downloaded packages]' \
      '(--install-option)--install-option[extra arguments to be supplied to the setup.py]' \
      '1: :->packages' &&  return 0

      if [[ $state == packages ]]; then
          declare -a packages
          [[ -z $words[CURRENT] ]] || \
              packages=($(pip search "$words[CURRENT]" | \
	        grep -i "^$words[CURRENT]" | \
	        cut -d ' ' -f 1 | tr '[A-Z]' '[a-z]' ))
          _describe -t commands 'packages' packages
      fi ;;
  uninstall)
    _pip_installed
    _wanted installed_pkgs expl 'installed packages' compadd -a installed_pkgs ;;
esac
